
// Environment interface
interface Env {
	MCP_AUTH_KEY: string;
}

// Direct JSON Schema definitions (no more Zod complexity!)
const toolSchemas = {
	generate_itinerary: {
		type: 'object',
		properties: {
			title: {
				type: 'string',
				description: 'Travel itinerary title'
			},
			destination: {
				type: 'string',
				description: 'Primary destination'
			},
			duration_days: {
				type: 'number',
				description: 'Trip duration in days'
			},
			traveler_count: {
				type: 'number',
				description: 'Number of travelers'
			},
			budget_range: {
				type: 'string',
				enum: ['budget', 'medium', 'luxury'],
				description: 'Budget category'
			},
			interests: {
				type: 'array',
				items: { type: 'string' },
				description: 'Traveler interests and preferences'
			},
			special_requirements: {
				type: 'string',
				description: 'Special requirements or notes'
			}
		},
		required: ['title', 'destination', 'duration_days', 'traveler_count', 'budget_range', 'interests']
	},
	generate_packing_list: {
		type: 'object',
		properties: {
			destination: {
				type: 'string',
				description: 'Travel destination'
			},
			duration_days: {
				type: 'number',
				description: 'Trip duration in days'
			},
			season: {
				type: 'string',
				enum: ['spring', 'summer', 'fall', 'winter'],
				description: 'Travel season'
			},
			trip_type: {
				type: 'string',
				enum: ['business', 'leisure', 'adventure', 'cultural'],
				description: 'Type of trip'
			},
			traveler_profile: {
				type: 'string',
				enum: ['solo', 'couple', 'family', 'group'],
				description: 'Traveler profile'
			},
			special_activities: {
				type: 'array',
				items: { type: 'string' },
				description: 'Special activities planned'
			}
		},
		required: ['destination', 'duration_days', 'season', 'trip_type', 'traveler_profile']
	},
	generate_travel_budget: {
		type: 'object',
		properties: {
			destination: {
				type: 'string',
				description: 'Travel destination'
			},
			duration_days: {
				type: 'number',
				description: 'Trip duration in days'
			},
			traveler_count: {
				type: 'number',
				description: 'Number of travelers'
			},
			budget_range: {
				type: 'string',
				enum: ['budget', 'medium', 'luxury'],
				description: 'Budget category'
			},
			trip_type: {
				type: 'string',
				enum: ['business', 'leisure', 'adventure', 'cultural'],
				description: 'Type of trip'
			},
			include_flights: {
				type: 'boolean',
				description: 'Include flight costs'
			}
		},
		required: ['destination', 'duration_days', 'traveler_count', 'budget_range', 'trip_type']
	},
	generate_travel_checklist: {
		type: 'object',
		properties: {
			destination: {
				type: 'string',
				description: 'Travel destination'
			},
			duration_days: {
				type: 'number',
				description: 'Trip duration in days'
			},
			trip_type: {
				type: 'string',
				enum: ['business', 'leisure', 'adventure', 'cultural'],
				description: 'Type of trip'
			},
			departure_date: {
				type: 'string',
				description: 'Departure date (YYYY-MM-DD)'
			},
			international_travel: {
				type: 'boolean',
				description: 'Is this international travel'
			},
			special_requirements: {
				type: 'string',
				description: 'Special requirements or notes'
			}
		},
		required: ['destination', 'duration_days', 'trip_type', 'departure_date', 'international_travel']
	}
};

// No conversion needed - we use direct JSON schemas!

// Tool implementations
class TemplateDocumentTools {
	private env: Env;
	
	constructor(env: Env) {
		this.env = env;
	}
	
	async generate_itinerary(params: any) {
		try {
			const itinerary = `# ${params.title}

## Trip Overview
- **Destination**: ${params.destination}
- **Duration**: ${params.duration_days} days
- **Travelers**: ${params.traveler_count} ${params.traveler_count === 1 ? 'person' : 'people'}
- **Budget Range**: ${params.budget_range}

## Interests & Preferences
${params.interests.map((interest: string) => `- ${interest}`).join('\n')}

## Sample Daily Activities
${Array.from({length: Math.min(params.duration_days, 7)}, (_, i) => {
  const day = i + 1;
  return `### Day ${day}
- **Morning**: Explore local attractions
- **Afternoon**: ${params.interests[i % params.interests.length]} activities
- **Evening**: Local dining experience`;
}).join('\n\n')}

${params.special_requirements ? `\n## Special Requirements\n${params.special_requirements}` : ''}

## Travel Tips
- Book accommodations in advance
- Check visa requirements
- Pack according to weather forecast
- Keep digital copies of important documents

---
*Generated by Template Document MCP*`;

			return {
				content: [{
					type: "text",
					text: itinerary
				}]
			};
		} catch (error: any) {
			console.error('Error generating itinerary:', error);
			return {
				content: [{
					type: "text",
					text: `Error generating itinerary: ${error.message}`
				}]
			};
		}
	}
	
	async generate_packing_list(params: any) {
		try {
			const packingList = `# Packing List for ${params.destination}

## Trip Details
- **Destination**: ${params.destination}
- **Duration**: ${params.duration_days} days
- **Season**: ${params.season}
- **Trip Type**: ${params.trip_type}
- **Traveler Profile**: ${params.traveler_profile}

## Essential Items

### Clothing
- ${params.duration_days + 1} days of underwear
- ${Math.ceil(params.duration_days / 2)} pairs of socks
- ${params.season === 'summer' ? 'Light, breathable clothing' : 'Warm layers'}
- ${params.season === 'winter' ? 'Heavy jacket, gloves, hat' : 'Light jacket or sweater'}
- Comfortable walking shoes
- ${params.trip_type === 'business' ? 'Business attire' : 'Casual clothing'}

### Personal Care
- Toothbrush and toothpaste
- Shampoo and body wash
- Deodorant
- Any prescription medications
- Sunscreen
- ${params.traveler_profile === 'family' ? 'Baby/child care items if needed' : ''}

### Electronics
- Phone charger
- Camera
- Power bank
- Universal adapter (for international travel)

### Documents
- Passport/ID
- Travel insurance
- Flight/hotel confirmations
- Emergency contact information

${params.special_activities?.length ? `\n### Special Activity Items\n${params.special_activities.map((activity: string) => `- Items for: ${activity}`).join('\n')}` : ''}

## Tips
- Roll clothes to save space
- Pack essentials in carry-on
- Leave room for souvenirs
- Check weather forecast before departure

---
*Generated by Template Document MCP*`;

			return {
				content: [{
					type: "text",
					text: packingList
				}]
			};
		} catch (error: any) {
			console.error('Error generating packing list:', error);
			return {
				content: [{
					type: "text",
					text: `Error generating packing list: ${error.message}`
				}]
			};
		}
	}
	
	async generate_travel_budget(params: any) {
		try {
			const budgetMultiplier = params.budget_range === 'budget' ? 1 : params.budget_range === 'medium' ? 2 : 3;
			const dailyBase = 50 * budgetMultiplier;

			const budget = `# Travel Budget for ${params.destination}

## Trip Overview
- **Destination**: ${params.destination}
- **Duration**: ${params.duration_days} days
- **Travelers**: ${params.traveler_count}
- **Budget Category**: ${params.budget_range}

## Estimated Costs (USD)

### Accommodation
- **Per night**: $${Math.round(dailyBase * 1.5)}
- **Total (${params.duration_days} nights)**: $${Math.round(dailyBase * 1.5 * params.duration_days * params.traveler_count)}

### Meals
- **Per person per day**: $${Math.round(dailyBase * 0.8)}
- **Total**: $${Math.round(dailyBase * 0.8 * params.duration_days * params.traveler_count)}

${params.include_flights ? `### Flights
- **Per person**: $${Math.round(dailyBase * 8)}
- **Total**: $${Math.round(dailyBase * 8 * params.traveler_count)}` : ''}

### Activities & Entertainment
- **Per day**: $${Math.round(dailyBase * 0.6)}
- **Total**: $${Math.round(dailyBase * 0.6 * params.duration_days)}

### Local Transportation
- **Per day**: $${Math.round(dailyBase * 0.3)}
- **Total**: $${Math.round(dailyBase * 0.3 * params.duration_days)}

### Miscellaneous & Souvenirs
- **Total**: $${Math.round(dailyBase * 2)}

## Total Estimated Budget
**$${Math.round(
  (dailyBase * 1.5 * params.duration_days * params.traveler_count) + // accommodation
  (dailyBase * 0.8 * params.duration_days * params.traveler_count) + // meals
  (params.include_flights ? dailyBase * 8 * params.traveler_count : 0) + // flights
  (dailyBase * 0.6 * params.duration_days) + // activities
  (dailyBase * 0.3 * params.duration_days) + // transport
  (dailyBase * 2) // misc
)}**

## Money-Saving Tips
- Book accommodations and flights in advance
- Look for free activities and attractions
- Use public transportation
- Eat at local restaurants
- Consider travel during off-peak seasons

---
*Generated by Template Document MCP*`;

			return {
				content: [{
					type: "text",
					text: budget
				}]
			};
		} catch (error: any) {
			console.error('Error generating budget:', error);
			return {
				content: [{
					type: "text",
					text: `Error generating budget: ${error.message}`
				}]
			};
		}
	}
	
	async generate_travel_checklist(params: any) {
		try {
			const departureDate = new Date(params.departure_date);
			const now = new Date();
			const daysUntilDeparture = Math.ceil((departureDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));

			const checklist = `# Travel Checklist for ${params.destination}

## Trip Information
- **Destination**: ${params.destination}
- **Duration**: ${params.duration_days} days
- **Departure**: ${params.departure_date}
- **Days until departure**: ${daysUntilDeparture}
- **International travel**: ${params.international_travel ? 'Yes' : 'No'}

## 8+ Weeks Before
- [ ] Research destination and create itinerary
- [ ] Book flights and accommodation
- [ ] Apply for visa/passport if needed (international travel)
- [ ] Check vaccination requirements

## 4-6 Weeks Before
- [ ] Purchase travel insurance
- [ ] Notify bank and credit card companies
- [ ] Research local customs and etiquette
- [ ] Book major tours or activities

## 2-3 Weeks Before
- [ ] Check-in for flights
- [ ] Print or download boarding passes
- [ ] Confirm hotel reservations
- [ ] Pack essential medications
- [ ] Arrange pet/house care if needed

## 1 Week Before
- [ ] Check weather forecast
- [ ] Start packing
- [ ] Charge all electronic devices
- [ ] Get local currency if needed
- [ ] Download offline maps

## Day Before Departure
- [ ] Finish packing
- [ ] Check flight status
- [ ] Set multiple alarms
- [ ] Double-check all documents
- [ ] Prepare carry-on bag

## Day of Departure
- [ ] Final document check
- [ ] Arrive at airport 2-3 hours early (international)
- [ ] Keep boarding pass and ID easily accessible
- [ ] Stay hydrated
- [ ] Enjoy your trip!

${params.international_travel ? `
## International Travel Specific
- [ ] Passport valid for 6+ months
- [ ] Visa obtained if required
- [ ] Travel insurance purchased
- [ ] Vaccination certificates
- [ ] International phone plan or SIM card
- [ ] Power adapter for destination country` : ''}

${params.special_requirements ? `\n## Special Requirements\n${params.special_requirements.split('\n').map((req: string) => `- [ ] ${req}`).join('\n')}` : ''}

---
*Generated by Template Document MCP*`;

			return {
				content: [{
					type: "text",
					text: checklist
				}]
			};
		} catch (error: any) {
			console.error('Error generating checklist:', error);
			return {
				content: [{
					type: "text",
					text: `Error generating checklist: ${error.message}`
				}]
			};
		}
	}
}

// Pure MCP JSON-RPC 2.0 Handler
class PureTemplateDocumentMCPServer {
	private tools: TemplateDocumentTools;
	
	constructor(env: Env) {
		this.tools = new TemplateDocumentTools(env);
	}
	
	async handleRequest(request: any): Promise<any> {
		const { method, params, id } = request;
		
		try {
			switch (method) {
				case 'initialize':
					return {
						jsonrpc: '2.0',
						id,
						result: {
							protocolVersion: '2024-11-05',
							capabilities: {
								tools: {}
							},
							serverInfo: {
								name: 'Template Document MCP',
								version: '3.0.0'
							}
						}
					};
					
				case 'tools/list':
					return {
						jsonrpc: '2.0',
						id,
						result: {
							tools: [
								{
									name: 'generate_itinerary',
									description: 'Generate a comprehensive travel itinerary with daily activities',
									inputSchema: toolSchemas.generate_itinerary
								},
								{
									name: 'generate_packing_list',
									description: 'Create a detailed packing list based on destination and trip details',
									inputSchema: toolSchemas.generate_packing_list
								},
								{
									name: 'generate_travel_budget',
									description: 'Generate an estimated travel budget breakdown',
									inputSchema: toolSchemas.generate_travel_budget
								},
								{
									name: 'generate_travel_checklist',
									description: 'Create a comprehensive pre-travel checklist with timeline',
									inputSchema: toolSchemas.generate_travel_checklist
								}
							]
						}
					};
					
				case 'tools/call':
					const toolName = params.name;
					const toolArgs = params.arguments || {};
					
					// Validate tool exists
					if (!(toolName in toolSchemas)) {
						throw new Error(`Unknown tool: ${toolName}`);
					}
					
					// Call the appropriate tool method
					const result = await (this.tools as any)[toolName](toolArgs);
					
					return {
						jsonrpc: '2.0',
						id,
						result
					};
					
				case 'ping':
					return {
						jsonrpc: '2.0',
						id,
						result: {}
					};
					
				default:
					throw new Error(`Unknown method: ${method}`);
			}
		} catch (error) {
			return {
				jsonrpc: '2.0',
				id,
				error: {
					code: -32603,
					message: 'Internal error',
					data: String(error)
				}
			};
		}
	}
}

// Cloudflare Worker Export
export default {
	async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
		const url = new URL(request.url);
		
		// CORS headers
		const corsHeaders = {
			'Access-Control-Allow-Origin': '*',
			'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
			'Access-Control-Allow-Headers': 'Content-Type, Authorization',
		};
		
		// Handle CORS preflight
		if (request.method === 'OPTIONS') {
			return new Response(null, { headers: corsHeaders });
		}
		
		// SSE endpoint for MCP protocol
		if (url.pathname === '/sse') {
			const server = new PureTemplateDocumentMCPServer(env);
			
			// Handle incoming messages
			if (request.method === 'POST') {
				try {
					const body = await request.json();
					const response = await server.handleRequest(body);
					
					// Return SSE-formatted response
					return new Response(
						`data: ${JSON.stringify(response)}\n\n`,
						{
							headers: {
								'Content-Type': 'text/event-stream',
								'Cache-Control': 'no-cache',
								'Connection': 'keep-alive',
								...corsHeaders
							}
						}
					);
				} catch (error) {
					return new Response(
						`data: ${JSON.stringify({
							jsonrpc: '2.0',
							error: {
								code: -32700,
								message: 'Parse error',
								data: String(error)
							}
						})}\n\n`,
						{
							headers: {
								'Content-Type': 'text/event-stream',
								'Cache-Control': 'no-cache',
								'Connection': 'keep-alive',
								...corsHeaders
							}
						}
					);
				}
			}
			
			// For GET requests, return a simple SSE connection
			return new Response(
				`data: {"jsonrpc":"2.0","method":"ping","result":{}}\n\n`,
				{
					headers: {
						'Content-Type': 'text/event-stream',
						'Cache-Control': 'no-cache',
						'Connection': 'keep-alive',
						...corsHeaders
					}
				}
			);
		}
		
		// Health check endpoint
		if (url.pathname === '/health') {
			return new Response(JSON.stringify({
				status: 'healthy',
				service: 'Pure Template Document MCP v3',
				timestamp: new Date().toISOString()
			}), {
				headers: { 
					'Content-Type': 'application/json',
					...corsHeaders
				}
			});
		}
		
		// Default response
		return new Response(JSON.stringify({
			error: 'Not found',
			available_endpoints: ['/sse', '/health']
		}), {
			status: 404,
			headers: { 
				'Content-Type': 'application/json',
				...corsHeaders
			}
		});
	}
};