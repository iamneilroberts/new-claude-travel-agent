import { McpAgent } from "agents/mcp";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";

interface Env {
  MCP_AUTH_KEY: string;
}

export class TemplateDocumentMCP extends McpAgent {
  server = new McpServer({
    name: "Template Document MCP",
    version: "1.0.0",
  });

  async init() {
    const env = (this as any).env as Env;

    // Generate itinerary tool
    this.server.tool(
      "generate_itinerary",
      {
        title: z.string().describe("Travel itinerary title"),
        destination: z.string().describe("Primary destination"),
        duration_days: z.number().describe("Trip duration in days"),
        traveler_count: z.number().describe("Number of travelers"),
        budget_range: z.enum(['budget', 'medium', 'luxury']).describe("Budget category"),
        interests: z.array(z.string()).describe("Traveler interests and preferences"),
        special_requirements: z.string().optional().describe("Special requirements or notes")
      },
      async (params) => {
        try {
          const itinerary = `# ${params.title}

## Trip Overview
- **Destination**: ${params.destination}
- **Duration**: ${params.duration_days} days
- **Travelers**: ${params.traveler_count} ${params.traveler_count === 1 ? 'person' : 'people'}
- **Budget Range**: ${params.budget_range}

## Interests & Preferences
${params.interests.map((interest: string) => `- ${interest}`).join('\n')}

## Sample Daily Activities
${Array.from({length: Math.min(params.duration_days, 7)}, (_, i) => {
  const day = i + 1;
  return `### Day ${day}
- **Morning**: Explore local attractions
- **Afternoon**: ${params.interests[i % params.interests.length]} activities
- **Evening**: Local dining experience`;
}).join('\n\n')}

${params.special_requirements ? `\n## Special Requirements\n${params.special_requirements}` : ''}

## Travel Tips
- Book accommodations in advance
- Check visa requirements
- Pack according to weather forecast
- Keep digital copies of important documents

---
*Generated by Template Document MCP*`;

          return {
            content: [{
              type: "text",
              text: itinerary
            }]
          };
        } catch (error: any) {
          console.error('Error generating itinerary:', error);
          return {
            content: [{
              type: "text",
              text: `Error generating itinerary: ${error.message}`
            }],
            isError: true
          };
        }
      }
    );

    // Generate packing list tool
    this.server.tool(
      "generate_packing_list",
      {
        destination: z.string().describe("Travel destination"),
        duration_days: z.number().describe("Trip duration in days"),
        season: z.enum(['spring', 'summer', 'fall', 'winter']).describe("Travel season"),
        trip_type: z.enum(['business', 'leisure', 'adventure', 'cultural']).describe("Type of trip"),
        traveler_profile: z.enum(['solo', 'couple', 'family', 'group']).describe("Traveler profile"),
        special_activities: z.array(z.string()).optional().describe("Special activities planned")
      },
      async (params) => {
        try {
          const packingList = `# Packing List for ${params.destination}

## Trip Details
- **Destination**: ${params.destination}
- **Duration**: ${params.duration_days} days
- **Season**: ${params.season}
- **Trip Type**: ${params.trip_type}
- **Traveler Profile**: ${params.traveler_profile}

## Essential Items

### Clothing
- ${params.duration_days + 1} days of underwear
- ${Math.ceil(params.duration_days / 2)} pairs of socks
- ${params.season === 'summer' ? 'Light, breathable clothing' : 'Warm layers'}
- ${params.season === 'winter' ? 'Heavy jacket, gloves, hat' : 'Light jacket or sweater'}
- Comfortable walking shoes
- ${params.trip_type === 'business' ? 'Business attire' : 'Casual clothing'}

### Personal Care
- Toothbrush and toothpaste
- Shampoo and body wash
- Deodorant
- Any prescription medications
- Sunscreen
- ${params.traveler_profile === 'family' ? 'Baby/child care items if needed' : ''}

### Electronics
- Phone charger
- Camera
- Power bank
- Universal adapter (for international travel)

### Documents
- Passport/ID
- Travel insurance
- Flight/hotel confirmations
- Emergency contact information

${params.special_activities?.length ? `\n### Special Activity Items\n${params.special_activities.map((activity: string) => `- Items for: ${activity}`).join('\n')}` : ''}

## Tips
- Roll clothes to save space
- Pack essentials in carry-on
- Leave room for souvenirs
- Check weather forecast before departure

---
*Generated by Template Document MCP*`;

          return {
            content: [{
              type: "text",
              text: packingList
            }]
          };
        } catch (error: any) {
          console.error('Error generating packing list:', error);
          return {
            content: [{
              type: "text",
              text: `Error generating packing list: ${error.message}`
            }],
            isError: true
          };
        }
      }
    );

    // Generate travel budget tool
    this.server.tool(
      "generate_travel_budget",
      {
        destination: z.string().describe("Travel destination"),
        duration_days: z.number().describe("Trip duration in days"),
        traveler_count: z.number().describe("Number of travelers"),
        budget_range: z.enum(['budget', 'medium', 'luxury']).describe("Budget category"),
        trip_type: z.enum(['business', 'leisure', 'adventure', 'cultural']).describe("Type of trip"),
        include_flights: z.boolean().optional().describe("Include flight costs")
      },
      async (params) => {
        try {
          const budgetMultiplier = params.budget_range === 'budget' ? 1 : params.budget_range === 'medium' ? 2 : 3;
          const dailyBase = 50 * budgetMultiplier;

          const budget = `# Travel Budget for ${params.destination}

## Trip Overview
- **Destination**: ${params.destination}
- **Duration**: ${params.duration_days} days
- **Travelers**: ${params.traveler_count}
- **Budget Category**: ${params.budget_range}

## Estimated Costs (USD)

### Accommodation
- **Per night**: $${Math.round(dailyBase * 1.5)}
- **Total (${params.duration_days} nights)**: $${Math.round(dailyBase * 1.5 * params.duration_days * params.traveler_count)}

### Meals
- **Per person per day**: $${Math.round(dailyBase * 0.8)}
- **Total**: $${Math.round(dailyBase * 0.8 * params.duration_days * params.traveler_count)}

${params.include_flights ? `### Flights
- **Per person**: $${Math.round(dailyBase * 8)}
- **Total**: $${Math.round(dailyBase * 8 * params.traveler_count)}` : ''}

### Activities & Entertainment
- **Per day**: $${Math.round(dailyBase * 0.6)}
- **Total**: $${Math.round(dailyBase * 0.6 * params.duration_days)}

### Local Transportation
- **Per day**: $${Math.round(dailyBase * 0.3)}
- **Total**: $${Math.round(dailyBase * 0.3 * params.duration_days)}

### Miscellaneous & Souvenirs
- **Total**: $${Math.round(dailyBase * 2)}

## Total Estimated Budget
**$${Math.round(
  (dailyBase * 1.5 * params.duration_days * params.traveler_count) + // accommodation
  (dailyBase * 0.8 * params.duration_days * params.traveler_count) + // meals
  (params.include_flights ? dailyBase * 8 * params.traveler_count : 0) + // flights
  (dailyBase * 0.6 * params.duration_days) + // activities
  (dailyBase * 0.3 * params.duration_days) + // transport
  (dailyBase * 2) // misc
)}**

## Money-Saving Tips
- Book accommodations and flights in advance
- Look for free activities and attractions
- Use public transportation
- Eat at local restaurants
- Consider travel during off-peak seasons

---
*Generated by Template Document MCP*`;

          return {
            content: [{
              type: "text",
              text: budget
            }]
          };
        } catch (error: any) {
          console.error('Error generating budget:', error);
          return {
            content: [{
              type: "text",
              text: `Error generating budget: ${error.message}`
            }],
            isError: true
          };
        }
      }
    );

    // Generate travel checklist tool
    this.server.tool(
      "generate_travel_checklist",
      {
        destination: z.string().describe("Travel destination"),
        duration_days: z.number().describe("Trip duration in days"),
        trip_type: z.enum(['business', 'leisure', 'adventure', 'cultural']).describe("Type of trip"),
        departure_date: z.string().describe("Departure date (YYYY-MM-DD)"),
        international_travel: z.boolean().describe("Is this international travel"),
        special_requirements: z.string().optional().describe("Special requirements or notes")
      },
      async (params) => {
        try {
          const departureDate = new Date(params.departure_date);
          const now = new Date();
          const daysUntilDeparture = Math.ceil((departureDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));

          const checklist = `# Travel Checklist for ${params.destination}

## Trip Information
- **Destination**: ${params.destination}
- **Duration**: ${params.duration_days} days
- **Departure**: ${params.departure_date}
- **Days until departure**: ${daysUntilDeparture}
- **International travel**: ${params.international_travel ? 'Yes' : 'No'}

## 8+ Weeks Before
- [ ] Research destination and create itinerary
- [ ] Book flights and accommodation
- [ ] Apply for visa/passport if needed (international travel)
- [ ] Check vaccination requirements

## 4-6 Weeks Before
- [ ] Purchase travel insurance
- [ ] Notify bank and credit card companies
- [ ] Research local customs and etiquette
- [ ] Book major tours or activities

## 2-3 Weeks Before
- [ ] Check-in for flights
- [ ] Print or download boarding passes
- [ ] Confirm hotel reservations
- [ ] Pack essential medications
- [ ] Arrange pet/house care if needed

## 1 Week Before
- [ ] Check weather forecast
- [ ] Start packing
- [ ] Charge all electronic devices
- [ ] Get local currency if needed
- [ ] Download offline maps

## Day Before Departure
- [ ] Finish packing
- [ ] Check flight status
- [ ] Set multiple alarms
- [ ] Double-check all documents
- [ ] Prepare carry-on bag

## Day of Departure
- [ ] Final document check
- [ ] Arrive at airport 2-3 hours early (international)
- [ ] Keep boarding pass and ID easily accessible
- [ ] Stay hydrated
- [ ] Enjoy your trip!

${params.international_travel ? `
## International Travel Specific
- [ ] Passport valid for 6+ months
- [ ] Visa obtained if required
- [ ] Travel insurance purchased
- [ ] Vaccination certificates
- [ ] International phone plan or SIM card
- [ ] Power adapter for destination country` : ''}

${params.special_requirements ? `\n## Special Requirements\n${params.special_requirements.split('\n').map((req: string) => `- [ ] ${req}`).join('\n')}` : ''}

---
*Generated by Template Document MCP*`;

          return {
            content: [{
              type: "text",
              text: checklist
            }]
          };
        } catch (error: any) {
          console.error('Error generating checklist:', error);
          return {
            content: [{
              type: "text",
              text: `Error generating checklist: ${error.message}`
            }],
            isError: true
          };
        }
      }
    );
  }
}

export default {
  fetch(request: Request, env: Env, ctx: ExecutionContext) {
    const url = new URL(request.url);

    // Health check endpoint
    if (url.pathname === '/health') {
      return new Response(JSON.stringify({
        status: 'ok',
        service: 'Template Document MCP',
        version: '1.0.0',
        timestamp: new Date().toISOString()
      }), {
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // SSE endpoints (primary)
    if (url.pathname === "/sse" || url.pathname === "/sse/message") {
      return TemplateDocumentMCP.serveSSE("/sse").fetch(request, env, ctx);
    }

    // Default 404 response
    return new Response(JSON.stringify({
      error: "Not found",
      available_endpoints: ["/health", "/sse"]
    }), {
      status: 404,
      headers: { 'Content-Type': 'application/json' }
    });
  },
};